function output = CR7T_estimate_beta_series(subject_label,results_dir)
%% Run GLM beta series estimation using ROI PCs and 3dLSS
% This function implements creation of the white matter/ventricle first 5 principal
% components, then runs beta-series GLM using 3dLSS using these timeseries
% as additional regressors of no interest (hopefully removing some global
% signal which appears to inflate connectivity in some subjects)
% Ben Conrad - 1/18/19

%% Go to results directory
cd(results_dir)
% set subject label
subj = subject_label;

%% Run WM/Ventricle principle component estimation process, as in afni_proc.py
if ~exist('ROIPC.WM.1D','file') || ~exist('ROIPC.Vent.1D','file')

    % set list of runs
    runs = {'01','02','03','04'}; 

    % and make note of repetitions (TRs) per run
    tr_counts = '243 243 243 243';

    % create ROI PC ort sets: WM and Vent
    % create a time series dataset to run 3dpc on...
    % detrend, so principal components are not affected
    for r = 1:numel(runs)
        % to censor, create per-run censor files
        unix(['1d_tool.py -set_run_lengths ' tr_counts ' -select_runs ' runs{r}...
            ' -infile censor_' subj '_combined_2.1D'...
            ' -write rm.censor.r' runs{r} '.1D']);
        % do not let censored time points affect detrending
        unix(['3dTproject -polort 4 -prefix rm.det_pcin_r' runs{r}...
            ' -censor rm.censor.r' runs{r} '.1D -cenmode KILL'...
            ' -input pb03.' subj '.r' runs{r} '.volreg+tlrc']);
    end

    % catenate runs, prepare to censor TRs
    unix('3dTcat -prefix rm.det_pcin_rall rm.det_pcin_r*+tlrc.HEAD');

    if ~exist('ROIPC.WM.1D','file')
        % make ROI PCs : WM
        unix(['3dpc -verbose -mask Seg/mask_WMe_resam_final.nii'...
              ' -pcsave 5 -prefix rm.ROIPC.WM rm.det_pcin_rall+tlrc']);
        % zero pad censored TRs
        unix(['1d_tool.py -censor_fill_parent censor_' subj '_combined_2.1D'...
              ' -infile rm.ROIPC.WM_vec.1D'...
              ' -write ROIPC.WM.1D']);
    end

    if ~exist('ROIPC.Vent.1D','file')
        % make ROI PCs : Vent
        unix(['3dpc -verbose -mask Seg/mask_Vent_resam.nii'...
              ' -pcsave 5 -prefix rm.ROIPC.Vent rm.det_pcin_rall+tlrc']);
        % zero pad censored TRs
        unix(['1d_tool.py -censor_fill_parent censor_' subj '_combined_2.1D'...
              ' -infile rm.ROIPC.Vent_vec.1D'...
              ' -write ROIPC.Vent.1D']);
    end
end

%% Run GLM
unix(['rm -f ' subj '_beta_series*']); % Remove if exist
unix(['3dDeconvolve -input '...
    ' pb05.' subj '.r01.scale+tlrc.HEAD'...
    ' pb05.' subj '.r02.scale+tlrc.HEAD'...
    ' pb05.' subj '.r03.scale+tlrc.HEAD'...
    ' pb05.' subj '.r04.scale+tlrc.HEAD'...
    ' -censor censor_' subj '_combined_2.1D'...
    ' -ortvec ROIPC.WM.1D ROIPC.WM'...
    ' -ortvec ROIPC.Vent.1D ROIPC.Vent'...
    ' -polort 4 -float'...                                                       
    ' -num_stimts 13'...
    ' -stim_file 1 motion_demean.1D"[0]" -stim_base 1  -stim_label 1 roll_01'...    
    ' -stim_file 2 motion_demean.1D"[1]" -stim_base 2  -stim_label 2 pitch_01'...   
    ' -stim_file 3 motion_demean.1D"[2]" -stim_base 3  -stim_label 3 yaw_01'...     
    ' -stim_file 4 motion_demean.1D"[3]" -stim_base 4  -stim_label 4 dS_01'...      
    ' -stim_file 5 motion_demean.1D"[4]" -stim_base 5  -stim_label 5 dL_01'...      
    ' -stim_file 6 motion_demean.1D"[5]" -stim_base 6  -stim_label 6 dP_01'...      
    ' -stim_file 7 motion_deriv.1D"[0]"  -stim_base 7  -stim_label 7 roll_02'...     
    ' -stim_file 8 motion_deriv.1D"[1]"  -stim_base 8  -stim_label 8 pitch_02'... 
    ' -stim_file 9 motion_deriv.1D"[2]"  -stim_base 9  -stim_label 9 yaw_02'...   
    ' -stim_file 10 motion_deriv.1D"[3]" -stim_base 10 -stim_label 10 dS_02'...    
    ' -stim_file 11 motion_deriv.1D"[4]" -stim_base 11 -stim_label 11 dL_02'...    
    ' -stim_file 12 motion_deriv.1D"[5]" -stim_base 12 -stim_label 12 dP_02'...
    ' -stim_times_IM 13 ../onsets/onsets_allstims_' subj '.txt "GAM(8.6,.547,.5)" '...
    ' -stim_label 13 allstims'...
    ' -x1D_stop '...
    ' -x1D_uncensored ' subj '_beta_series.uncensored.X.xmat.1D'...
    ' -x1D ' subj '_beta_series.X.xmat.1D -xjpeg ' subj '_beta_series.X.jpg'],'-echo');

%% Create new out.ss_review text file - corresponding to beta-series estimation
% Generate scripts to review single subject results
unix(['gen_ss_review_scripts.py '...
    ' -prefix ' subj '_beta_series.'...
    ' -xmat_uncensored ' subj '_beta_series.uncensored.X.xmat.1D'...
    ' -xmat_regress ' subj '_beta_series.X.xmat.1D'... 
    ' -mot_limit 0.3'...
    ' -out_limit 0.05']);

% Run basic subject review script
unix(['./' subj '_beta_series.@ss_review_basic '...
    '|& tee ' subj '_beta_series.out.ss_review.txt']);

%% Create temporary catenated dataset for 3dLSS
unix(['3dTcat '...
    ' pb05.' subj '.r01.scale+tlrc.HEAD'...
    ' pb05.' subj '.r02.scale+tlrc.HEAD'...
    ' pb05.' subj '.r03.scale+tlrc.HEAD'...
    ' pb05.' subj '.r04.scale+tlrc.HEAD'...
    ' -prefix rm.' subj],'-echo');

%% Run 3dLSS
unix(['3dLSS -verb -input rm.' subj '+tlrc'...
    ' -matrix ' subj '_beta_series.X.xmat.1D'...
    ' -save1D ' subj '_beta_series_LSS_est_vecs.txt'...
    ' -prefix ' subj '_beta_series_LSS.nii.gz'],'-echo');

%% Remove temp files
unix('rm -f rm.*');


